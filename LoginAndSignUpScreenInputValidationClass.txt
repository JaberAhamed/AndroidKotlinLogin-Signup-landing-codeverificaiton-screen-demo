package com.bidyava.solutions.utils

import android.text.method.HideReturnsTransformationMethod
import android.text.method.PasswordTransformationMethod
import android.util.Log
import android.view.View
import android.widget.AutoCompleteTextView
import android.widget.EditText
import android.widget.TextView
import com.bidyava.solutions.R
import com.bidyava.solutions.models.pojoclass.District
import com.bidyava.solutions.ui.profile.PersonalInfoFragment
import java.util.regex.Matcher
import java.util.regex.Pattern

class Validation {

    companion object {
        val phone_pattern = "[0-9]{11}"
        val phone_email = ".*[a-zA-Z]+.*"
        val rPhone: Pattern = Pattern.compile(phone_pattern)
        val rEmail: Pattern = Pattern.compile(phone_email)

        fun emailPhoneValidation(emailEt: EditText, emailError: TextView): Boolean {
            val email_phone = emailEt.text.toString().replace("\\s".toRegex(), "")
            var m: Matcher = rPhone.matcher(email_phone.trim())
            var m2: Matcher = rEmail.matcher(email_phone.trim())

            if (android.util.Patterns.EMAIL_ADDRESS.matcher(email_phone).matches() ||
                m.find()
            ) {
                emailError.visibility = View.GONE
                return true
            } else {
                emailError.visibility = View.VISIBLE
                if (email_phone.isEmpty()) {
                    emailError.text = "Email or Phone Number required"
                    return false
                } else if (m2.find()) {
                    emailError.text = "Email is not valid"
                    return false
                } else {
                    emailError.text = "Phone Number is not valid"
                    return false
                    // binding.etEmailID.filters= arrayOf(InputFilter.LengthFilter(11))
                 }

            }
        }

        fun emailValidation(emailEt: EditText, emailError: TextView): Boolean {
            val email = emailEt.text.toString().replace("\\s".toRegex(), "")

            if (android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()
            ) {
                emailError.visibility = View.GONE
                return true
            } else if (email.isEmpty()) {
                emailError.visibility = View.GONE
                return true}
            else {
                emailError.visibility = View.VISIBLE
                emailError.text = "Email is not valid"
                return false
            }
        }

        fun phoneNumberValidate(phoneEt: TextView): Boolean {
            val phone = phoneEt.text.toString()
            if (phone.isEmpty()) {

                return false
            } else return phone.length == 10
        }

        fun phoneNumberValidateEt(phoneEt: EditText): Boolean {
            val phone = phoneEt.text.toString()
            if (phone.isEmpty()) {

                return false
            } else return phone.length == 11
        }
        fun loginPhoneNumberValidate(emailEt: EditText, emailError: TextView): Boolean  {
            val email = emailEt.text.toString().replace("\\s".toRegex(), "")
            var m: Matcher = rPhone.matcher(email.trim())
            var tureBoolean = if (m.find()
            ) {
                emailError.visibility = View.GONE
                 true
            } else {
                emailError.visibility = View.VISIBLE
                if (email.isEmpty()) { emailError.text = "Enter your phone number" } else { emailError.text = "Phone Number is not valid" }

                 false
            }
            return tureBoolean
        }

        fun passwordValidation(etPassword: EditText, passError: TextView): Boolean {
            var isPasswordValid = if (etPassword.text.toString().length < 4) {
                passError.visibility = View.VISIBLE
                passError.setText(R.string.password_required)
                 false
            } else {
                passError.visibility = View.GONE
                 true
            }
            return isPasswordValid
        }

        fun nameValidation(etName: EditText, nameError: TextView): Boolean {
            val nameInput: String = etName.text.toString()
            if (!nameInput.isEmpty()) {
                nameError.visibility = View.GONE
                return true
            } else {
                nameError.visibility = View.VISIBLE
                nameError.text = "Enter your name"
                return false
            }

//            val name: Regex = "^(\\s)*[A-Za-z]+((\\s)?((\\'|\\-|\\.)?([A-Za-z])+))*(\\s)*\$".toRegex()
//            val nameInput: String = etName.text.toString()
//
//            if (nameInput.matches(name)
//            ) {
//                nameError.visibility = View.GONE
//                return true
//            } else {
//                nameError.visibility = View.VISIBLE
//                if (!nameInput.isEmpty()) {
//                    nameError.text = "Name is not valid"
//                } else {
//                    nameError.text = "Enter your name"
//                }
//                return false
//            }
        }

        fun addressValidation(etAddress: EditText, addressError: TextView): Boolean {
            val addressInput: String = etAddress.text.toString()
            if (!addressInput.isEmpty()) {
                addressError.visibility = View.GONE
                return true
            } else {
                addressError.visibility = View.VISIBLE
                addressError.text = "Enter your address"
                return false
            }
        }

        fun districtValidation(etDistrict: AutoCompleteTextView, districtError: TextView,disbyList:ArrayList<District>): Boolean {
            val districts = disbyList
            val disInput: String = etDistrict.text.toString()
            if (!disInput.isEmpty()) {
                for (i in 0 until districts.size) {
                    if (disInput == districts[i].name) {
                        districtError.visibility = View.GONE
                        Log.d("DISTIC",districts[i].id.toString()+"  "+districts[i].toString()+" *** "+districts.size.toString()+" == "+districts.toString())
                        PersonalInfoFragment.destrictID=districts[i].id!!
                        return true
                    } else {
                        districtError.visibility = View.VISIBLE
                        districtError.text = "District is not valid"
                    }
                }
            } else {
                districtError.visibility = View.GONE
                return true
            }
            return false
        }

        fun commonFieldValidation(commonEt: EditText): Boolean {

            val common = commonEt.text.toString()
            if (common.isEmpty()) {
                commonEt.error = "This field is empty"
                return false
            } else {
                return true
            }
        }

        fun passwordShowAndHide(etPassword: EditText, isPasswordShow: Boolean): Boolean {
            if (isPasswordShow) {
                etPassword.transformationMethod =
                    PasswordTransformationMethod.getInstance()

                etPassword.setSelection(etPassword.text.toString().length)
                return false
            } else {
                etPassword.transformationMethod =
                    HideReturnsTransformationMethod.getInstance()
                etPassword.setSelection(etPassword.text.toString().length)
                return true
            }
        }
    }
}
